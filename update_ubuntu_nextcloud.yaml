---
- hosts: ubuntu
  gather_facts: yes
  become: yes

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600  # Consider cache valid for 1 hour

    - name: Perform a distro upgrade
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: yes  # Use apt-get instead of apt for better stability
      register: upgrade_output
      async: 3600  # Allow for a long running upgrade (1 hour)
      poll: 5  # Check every 5 seconds

    - name: Check if a reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_checksum: no
      register: reboot_required_file

    - name: Remove dependencies that are no longer needed
      ansible.builtin.apt:
        autoremove: yes
        autoclean: yes

    - name: Clean apt cache
      ansible.builtin.apt:
        clean: yes

    - name: Check available disk space after updates
      ansible.builtin.shell: df -h /
      register: disk_space
      changed_when: false

    - name: Display disk space information
      ansible.builtin.debug:
        var: disk_space.stdout_lines

    - name: Check docker compose version
      ansible.builtin.command: docker compose version
      register: docker_compose_version
      ignore_errors: yes
      changed_when: false

    - name: Find all compose.yaml files
      ansible.builtin.find:
        paths: 
          - "~"
          - "/opt"
        patterns: 
          - "compose.yaml"
          - "compose.yml"
          - "docker-compose.yaml"
          - "docker-compose.yml"
        recurse: yes
      register: compose_files
      vars:
        ansible_become: no

    - name: Pull latest images for each compose project
      ansible.builtin.shell: |
        cd {{ item.path | dirname }} && docker compose pull
      register: pull_output
      with_items: "{{ compose_files.files }}"
      when: docker_compose_version.rc == 0 and compose_files.files | length > 0
      vars:
        ansible_become: no
      
    - name: Update running containers with latest images
      ansible.builtin.shell: |
        cd {{ item.path | dirname }} && docker compose up -d
      register: update_output
      with_items: "{{ compose_files.files }}"
      when: docker_compose_version.rc == 0 and compose_files.files | length > 0
      vars:
        ansible_become: no

    - name: Get container status details
      ansible.builtin.shell: |
        cd {{ item.path | dirname }} && docker compose ps
      register: container_status
      with_items: "{{ compose_files.files }}"
      when: docker_compose_version.rc == 0 and compose_files.files | length > 0
      vars:
        ansible_become: no
      changed_when: false

    - name: Display container status
      ansible.builtin.debug:
        msg: "Container status for {{ item.item.path | dirname }}:\n{{ item.stdout }}"
      with_items: "{{ container_status.results }}"
      when: item.stdout is defined

    - name: Remove old/unused Docker images
      ansible.builtin.shell: docker image prune -f
      when: docker_compose_version.rc == 0
      vars:
        ansible_become: no

    - name: Display update results
      ansible.builtin.debug:
        msg: "Updated containers in {{ item.item.path | dirname }}"
      with_items: "{{ update_output.results }}"
      when: item.stdout is defined

    - name: Reboot server
      ansible.builtin.reboot:
        reboot_timeout: 600  # 10 minutes timeout for reboot
        pre_reboot_delay: 5  # Wait 5 seconds before rebooting
        post_reboot_delay: 30  # Wait 30 seconds after reboot

    - name: Wait for server to be reachable
      ansible.builtin.wait_for_connection:
        timeout: 300

    - name: Wait for Docker to be ready
      ansible.builtin.pause:
        seconds: 30

    - name: Start containers after reboot
      ansible.builtin.shell: |
        cd {{ item.path | dirname }} && docker compose up -d
      with_items: "{{ compose_files.files }}"
      when: docker_compose_version.rc == 0 and compose_files.files | length > 0
      vars:
        ansible_become: no

    - name: Display final results
      ansible.builtin.debug:
        msg: "Started containers in {{ item.item.path | dirname }}"
      with_items: "{{ update_output.results }}"
      when: item.stdout is defined